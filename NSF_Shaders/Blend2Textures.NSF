NSFShader Blend2Textures
{
"	
Shader function:
        This shader is use to animate two textures animated together.  The current
        texture is blend with the next one over time.  Both animated texture have to
        use exactly the same bitmap but displaced in the chronological order.

Texture used: 	
        Texture 1 : Base map (IFL file #1)
        Texture 2 : Dark map (IFL File #2)
	 
IFL file example:
        IFL file #1:    bitmap1.tga
                        bitmap2.tga
                        bitmap3.tga
        IFL file #2     bitmap2.tga
                        bitmap3.tga
                        bitmap1.tga

Constant variable explanation:
        The constant is equal to: Number_of_BITMAP_in_the_IFL_file / Animation_duration_in_second

Texture map setting:
        For each map, the user must set the Playback Rate.  This value is a fraction saying how long
        each bitmap should be render on the screen.  Ex: If your animation last for 20 frames and you 
        have 10 bitmaps, The result is: 10 / 20 = 0.5.  This value is tricky, Max might clip this value 
        when it is too small.  If Max clip the value (ex: 0.333333 ==> 0.34), the shader will not be
        accurate, so make sure to set your total frame and total bitmap to result into a not ciped fraction."

    // Attribute list
    Attributes
    {
        Attrib_Float
            Constant_Value
            Artist
            1.0
    }

    // Packing Definition
    PackingDef PosNormUV0
    {
        PD_Stream   0
            PDP_Position    0   PDT_Float3
            PDP_Normal      3   PDT_Float3
            PDP_TexCoord0   7   PDT_Float2
    }
    
    // Implementation
    Implementation VS10
    {
        "This implementation is intended for hardware 
         that supports vertex shader version 1.0"
        
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX8|DX9|XBOX
            VSVersion           = v1.0
            UserVersion         = v0.0
            PSVersion           = v0.0
            UsesNiRenderState   = true
        }
        
        // Packing Definition it uses
        PackingDef  PosNormUV0

        // 'Global' render states
        RenderStates
        {
            ZEnable             = ZB_True
            ZWriteEnable        = false
            ZFunc               = LessEqual
            AlphaBlendEnable    = true
	    SrcBlend            = SrcAlpha
            DestBlend           = InvSrcAlpha
            Lighting            = false
        }

        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "Blend2TextureWithVertexColor.vsh"

            // Vertex Shader constant map
            VS_Constantmap
            {
                CM_Defined      WorldViewProjTranspose  	0	0
				CM_Defined	time							4	0
				CM_Attribute    Constant_Value				5   1   0
            }
            
            // Texture stage 0
            Stage 0 Stage0
            {
				TSS_ColorArg1   = TA_Texture
                TSS_ColorOp     = TOP_SelectArg1
				TSS_AlphaArg1   = TA_Texture
                TSS_AlphaOp     = TOP_SelectArg1
				TSS_Texture     = NTM_Base
				TSS_TextureTransformFlags	= TTFF_Disable
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }

	    // Texture stage 1
            Stage 1 Stage1
            {
                TSS_ColorArg1   = TA_Texture
                TSS_ColorArg2   = TA_Current
				TSS_ColorOp     = TOP_BlendDiffuseAlpha
				TSS_AlphaArg1   = TA_Texture
				TSS_AlphaArg2   = TA_Current
				TSS_AlphaOp     = TOP_BlendDiffuseAlpha
                TSS_Texture     = NTM_Dark
				TSS_TextureTransformFlags	= TTFF_Disable
            }
            
            // Sampler stage 1
            Sampler 1   Sampler1
            {
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
        }
    }

	// Implementation
    Implementation NoShader
    {
        "This implementation is intended for hardware 
         that supports vertex shader version 1.0"
        
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX8|DX9|XBOX
            VSVersion           = v0.0
            UserVersion         = v0.0
            PSVersion           = v0.0
            UsesNiRenderState   = true
        }
        
        // Packing Definition it uses
        PackingDef  PosNormUV0

        // 'Global' render states
        RenderStates
        {
            ZEnable             = ZB_True
            ZWriteEnable        = false
            ZFunc               = LessEqual
            AlphaBlendEnable    = true
	    SrcBlend            = SrcAlpha
            DestBlend           = InvSrcAlpha
            Lighting            = false
        }

        // First pass
        Pass Pass0
        {            
            // Texture stage 0
            Stage 0 Stage0
            {
				TSS_ColorArg1   = TA_Texture
                TSS_ColorOp     = TOP_SelectArg1
				TSS_AlphaArg1   = TA_Texture
                TSS_AlphaOp     = TOP_SelectArg1
				TSS_Texture     = NTM_Base
				TSS_TextureTransformFlags	= TTFF_Disable
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
        }
    }
}
