//
// HDRFinal.NSF
// --------------------------------------------------------
//
// author: Daniel Sproul
//
// description:
// shader which implements final pass of HDR filter
// intended to be applied to a screen polygon textured
// with a rendered texture of the world scene
//
// --------------------------------------------------------

NSFShader HDRFinal
{
	Attributes
	{
		// mult to map from HDR color space into displayable color space
		// (1 / max displayable intensity)
		// @NOTE we need to actually use half the desired mult because otherwise mults > 1.0
		// get clamped to 1.0 by the pixel shader
		// ("DisplayableMultHalf" == kszDisplayableMultAttr)
		Attrib_Float		DisplayableMultHalf		Hidden		1.0
		
		// the glare texture
		Attrib_Texture		GlareTexture			Hidden		0		// 0 == kHDRGlareShaderMapIndex
	}

	// Packing Definition
	PackingDef Pos_Tex0_Tex1
	{
		PD_FixedFunction	false
		PD_Stream			0
		PDP_Position		0	PDT_Float3
		PDP_TexCoord0		7	PDT_Float2
		PDP_TexCoord1		8	PDT_Float2
	}

	// Implementation
    Implementation VS10PS14
    {
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX8|DX9|XBOX
            VSVersion           = v1.0
            PSVersion           = v1.4
            UserVersion         = v0.0
            UsesNiRenderState   = true
        }

		// Packing Definition it uses
		PackingDef	Pos_Tex0_Tex1
        
        // First pass
        Pass Pass0
        {            
			// Vertex shader program
            VSProgram   "HDRFinal.vsh"
            
			// Pixel shader program
            PSProgram   "HDRFinal.psh"
            
            // Vertex Shader constant map
			VS_Constantmap
			{
				// Matrices
				CM_Defined		WorldViewProjTranspose	6	0
			}
            
            // Vertex Shader constant map
			PS_Constantmap
			{
				CM_Attribute	DisplayableMultHalf		0	1	0
			}
            
			// Texture stage 0
			// (base texture -- the rendered scene texture)
			Stage 0 Stage0
			{
				TSS_Texture					= NTM_Base
				TSS_TexCoordIndex			= 0
				TSS_TextureTransformFlags	= TTFF_Disable
			}

			// Sampler stage 0
			Sampler 0   Sampler0
			{
				TSAMP_AddressU  = TADDR_Clamp
				TSAMP_AddressV  = TADDR_Clamp
				TSAMP_MagFilter = TEXF_Linear
				TSAMP_MinFilter = TEXF_Linear
				TSAMP_MipFilter = TEXF_None
			}

			// Texture stage 1
			// (glare texture)
			Stage 1 Stage1
			{
				TSS_Texture     			= <GlareTexture>
				TSS_TexCoordIndex 			= 1
				TSS_TextureTransformFlags 	= TTFF_Disable
			}

			// Sampler stage 1
			Sampler 1   Sampler1
			{
				TSAMP_AddressU  = TADDR_Clamp
				TSAMP_AddressV  = TADDR_Clamp
				TSAMP_MagFilter = TEXF_Linear
				TSAMP_MinFilter = TEXF_Linear
				//TSAMP_MagFilter = TEXF_PyramidalQuad
				//TSAMP_MinFilter = TEXF_PyramidalQuad
				TSAMP_MipFilter = TEXF_None
			}
        }
    }
}
