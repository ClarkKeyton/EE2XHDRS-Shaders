//
// HDRGlare1.psh
// --------------------------------------------------------
//
// author: Daniel Sproul
//
// description:
// first stage in two-stage glare generation, this will subtract out
// pixels based on a threshold and then blur the result
// (blur based on Gaussian_6Samp)
//
// input:
// t0 -- upper-left tex coords
// t1 -- uppertex coords
// t2 -- left tex coords
// t3 -- right tex coords
// t4 -- bottom tex coords
// t5 -- bottom-right tex coords
//
// constants:
// c0 -- SampleWeights (x = corner, y = side, z = unused, w = 1.0)
// c1 -- GlareThreshold (x = glare threshold, yzw = unused)
//
// --------------------------------------------------------

// pixel shader version
// @NOTE we use swizzles, write masks, temp registers, and 2 phases, all of which require 1.4
ps.1.4

// take texture samples
texld	r0, t0
texld	r1, t1
texld	r2, t2
texld	r3, t3
texld 	r4, t4
texld	r5, t5

// subtract out the glare threshold from each sample
sub		r0.rgb, r0, c1.xxx
sub		r1.rgb, r1, c1.xxx
sub		r2.rgb, r2, c1.xxx
sub		r3.rgb, r3, c1.xxx
sub		r4.rgb, r4, c1.xxx
sub		r5.rgb, r5, c1.xxx

// begin second phase
phase

// combine first two samples
mul		r1.rgb, r1, c0.yyy		// apply upper weight
mad		r0.rgb, r0, c0.xxx, r1	// apply upper-left weight, add weighted upper

// combine next two samples
mul		r3.rgb, r3, c0.yyy		// apply right weight
mad		r2.rgb, r2, c0.yyy, r3	// apply left weight, add weighted right

// combine last two samples
mul		r5.rgb, r5, c0.xxx		// apply lower-right weight
mad		r4.rgb, r4, c0.yyy, r5	// apply lower weight, add weighted lower-right

// final sum
add		r0.rgb, r0, r2
add_x2	r0.rgb, r0, r4			// double the result, can't quite remember why...
+ mov	r0.a, c0.w				// set alpha = 1.0 (phase 2 does not retain alpha on some hardware)
