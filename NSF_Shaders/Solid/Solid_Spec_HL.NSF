//
// Solid_Spec_HL.NSF
// --------------------------------------------------------
//
// author: Daniel Sproul
//
// description:
// shader which implements hemisphere lighting effect for
// a solid (not skinned) object, no dynamic lights,
// with specular lighting
//
// --------------------------------------------------------

NSFShader Solid_Spec_HL
{
	// Attribute list
	Global_Attributes
	{
		// defines the global attribute sundir
		Attrib_Point3		SunDir			Hidden  	0.0,0.0,1.0
		Attrib_Color		SunColor		Hidden  	1.0,0.0,0.0
		Attrib_Color		SunSpecular		Hidden		1.0,0.0,0.0
		//Attrib_Color		SceneAmbient	Hidden  	1.0,0.0,0.0		(unused)
		
		// sky illumination (for hemisphere lighting)
		Attrib_Color		SkyColor		Hidden  	1.0,0.0,0.0
		
		// intensity with which to sample the terrain 
		Attrib_Color		TerrIntensity	Hidden		1.0,0.0,0.0
		
		// reciprocal terrain dimensions (for hemisphere lighting)
		Attrib_Point2		TerrSizeRecip	Hidden		1.0,1.0
		
		// camera eye point
		Attrib_Point3		EyePoint		Hidden		0.0,0.0,0.0
	}
	
	Attributes
	{
		// the terrain texture
		Attrib_Texture		TerrainMap			Hidden		0		// 0 == kHemisphereLightingShaderMapIndex
		
		// model height-based terrain contribution height cutoff reciprocal
		Attrib_Float		CutoffHeightRecip	Hidden		1.0		// "CutoffHeightRecip" == kszExtraDataCutoffHeightRecip
	}

	// Packing Definition
	PackingDef Pos_Nor_Tex0
	{
		PD_FixedFunction	false
		PD_Stream			0
		PDP_Position		0	PDT_Float3
		PDP_Normal			3	PDT_Float3
		PDP_TexCoord0		7	PDT_Float2
	}

	// Implementation
    Implementation VS10PS10
    {
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX8|DX9|XBOX
            VSVersion           = v1.0
            PSVersion           = v1.0
            UserVersion         = v0.0
            UsesNiRenderState   = true
        }

		// Packing Definition it uses
		PackingDef	Pos_Nor_Tex0
        
        // First pass
        Pass Pass0
        {            
			// Vertex shader program
            VSProgram   "Solid_Spec_HL.vsh"
            
            // Pixel shader program
            PSProgram	"HemisphereLighting_Spec.psh"

			// Vertex Shader constant map
			VS_Constantmap
			{
				// sun and ambient
				CM_Global		SunDir					0	1
				CM_Global		SunColor				1	1
				//CM_Global		SceneAmbient			2	1	(unused)
				
				// material
				CM_Defined		MaterialDiffuse			3	0
				CM_Defined		MaterialSpecular		4	0
				
				// misc constants
    			CM_Constant		MiscConstants			5	1	0.0,1.0,0.5,1020.01
				
				// matrices
				CM_Defined		WorldViewProjTranspose	6	0
    			CM_Defined		WorldTranspose			10	0
				
				// hemisphere lighting
				// @NOTE terrain Z at model center is explicitly stuffed into
				// register 95 in code (95 == kHemisphereLightingShaderModelZRegister)
				CM_Global		SkyColor				90	1
				CM_Global		TerrIntensity			91	1						// intensity with which to sample the terrain
				CM_Constant   	TerrDir        			92	1	0.0,0.0,1.0,1.0
				CM_Global		TerrSizeRecip			93	1						// reciprocal terrain size
				CM_Attribute	CutoffHeightRecip		94	1	0					// world height at which to cutoff height-based terrain contrib (reciprocal)
				// FromCode		TerrZ					95	1
				
				// specular lighting
				CM_Global		SunSpecular				96	1
				CM_Global		EyePoint				97	1
			}
			
			// Texture stage 0
			// (base texture)
			Stage 0 Stage0
			{
				TSS_Texture					= NTM_Base
				TSS_TexCoordIndex			= 0
				TSS_TextureTransformFlags	= TTFF_Disable
			}

			// Sampler stage 0
			Sampler 0   Sampler0
			{
				TSAMP_AddressU  = TADDR_Wrap
				TSAMP_AddressV  = TADDR_Wrap
				TSAMP_AddressW  = TADDR_Wrap
				TSAMP_MagFilter = TEXF_Linear
				TSAMP_MinFilter = TEXF_Linear
				TSAMP_MipFilter = TEXF_Linear
			}

			// Texture stage 1
			// (terrain texture)
			Stage 1 Stage1
			{
				TSS_Texture     			= <TerrainMap>
				TSS_TexCoordIndex 			= 1
				TSS_TextureTransformFlags 	= TTFF_Disable
			}

			// Sampler stage 1
			Sampler 1   Sampler1
			{
				TSAMP_AddressU  = TADDR_Wrap
				TSAMP_AddressV  = TADDR_Wrap
				TSAMP_AddressW  = TADDR_Wrap
				TSAMP_MagFilter = TEXF_Linear
				TSAMP_MinFilter = TEXF_Linear
				TSAMP_MipFilter = TEXF_None
			}
        }
    }
}



////////////////////////////////////////////////////////////////////
//
// @TEST alternate version uses excessively bright pixel shader to
// demonstrate HDR filtering
//
NSFShader Solid_HL_ExcessivelyBright
{
	// Attribute list
	Global_Attributes
	{
		// Directional light
		Attrib_Point3		SunDir			Artist  	0.0,0.0,1.0
		Attrib_Color		SunColor		Artist  	1.0,0.0,0.0
		//Attrib_Color		SceneAmbient	Artist  	1.0,0.0,0.0		(unused)
		
		// sky illumination (for hemisphere lighting)
		Attrib_Color		SkyColor		Hidden  	1.0,0.0,0.0
		
		// intensity with which to sample the terrain 
		Attrib_Color		TerrIntensity	Hidden		1.0,0.0,0.0
		
		// reciprocal terrain dimensions (for hemisphere lighting)
		Attrib_Point2		TerrSizeRecip	Hidden		1.0,1.0
	}
	
	Attributes
	{
		// the terrain texture
		Attrib_Texture		TerrainMap			Hidden		0		// 0 == kHemisphereLightingShaderMapIndex
		
		// model height-based terrain contribution height cutoff reciprocal
		Attrib_Float		CutoffHeightRecip	Hidden		1.0		// "CutoffHeightRecip" == kszExtraDataCutoffHeightRecip
	}

	// Packing Definition
	PackingDef Pos_Nor_Tex0
	{
		PD_FixedFunction	false
		PD_Stream			0
		PDP_Position		0	PDT_Float3
		PDP_Normal			3	PDT_Float3
		PDP_TexCoord0		7	PDT_Float2
	}

	// Implementation
    Implementation VS10PS10
    {
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX8|DX9|XBOX
            VSVersion           = v1.0
            PSVersion           = v1.0
            UserVersion         = v0.0
            UsesNiRenderState   = true
        }

		// Packing Definition it uses
		PackingDef	Pos_Nor_Tex0
        
        // First pass
        Pass Pass0
        {            
			// Vertex shader program
            VSProgram   "Solid_HL.vsh"
            
            // Pixel shader program
            PSProgram	"HemisphereLighting_ExcessivelyBright.psh"

			// Vertex Shader constant map
			VS_Constantmap
			{
				// sun and ambient
				CM_Global		SunDir					0	1
				CM_Global		SunColor				1	1
				//CM_Global		SceneAmbient			2	1	(unused)
				
				// material
				CM_Defined		MaterialDiffuse			3	0
				
				// misc constants
    			CM_Constant		MiscConstants			5	1	0.0,1.0,0.5,1020.01
				
				// matrices
				CM_Defined		WorldViewProjTranspose	6	0
    			CM_Defined		WorldTranspose			10	0
				
				// hemisphere lighting
				// @NOTE terrain Z at model center is explicitly stuffed into
				// register 95 in code (95 == kHemisphereLightingShaderModelZRegister)
				CM_Global		SkyColor				90	1
				CM_Global		TerrIntensity			91	1						// intensity with which to sample the terrain
				CM_Constant   	TerrDir        			92	1	0.0,0.0,1.0,1.0
				CM_Global		TerrSizeRecip			93	1						// reciprocal terrain size
				CM_Attribute	CutoffHeightRecip		94	1	0					// world height at which to cutoff height-based terrain contrib (reciprocal)
				// FromCode		TerrZ					95	1
			}
			
			// Texture stage 0
			// (base texture)
			Stage 0 Stage0
			{
				TSS_Texture					= NTM_Base
				TSS_TexCoordIndex			= 0
				TSS_TextureTransformFlags	= TTFF_Disable
			}

			// Sampler stage 0
			Sampler 0   Sampler0
			{
				TSAMP_AddressU  = TADDR_Wrap
				TSAMP_AddressV  = TADDR_Wrap
				TSAMP_AddressW  = TADDR_Wrap
				TSAMP_MagFilter = TEXF_Linear
				TSAMP_MinFilter = TEXF_Linear
				TSAMP_MipFilter = TEXF_Linear
			}

			// Texture stage 1
			// (terrain texture)
			Stage 1 Stage1
			{
				TSS_Texture     			= <TerrainMap>
				TSS_TexCoordIndex 			= 1
				TSS_TextureTransformFlags 	= TTFF_Disable
			}

			// Sampler stage 1
			Sampler 1   Sampler1
			{
				TSAMP_AddressU  = TADDR_Wrap
				TSAMP_AddressV  = TADDR_Wrap
				TSAMP_AddressW  = TADDR_Wrap
				TSAMP_MagFilter = TEXF_Linear
				TSAMP_MinFilter = TEXF_Linear
				TSAMP_MipFilter = TEXF_None
			}
        }
    }
}