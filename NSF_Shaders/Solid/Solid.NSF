//
// Solid.NSF
// --------------------------------------------------------
//
// author: Daniel Sproul
//
// description:
// Basic shader for a solid (not skinned) object with
// no special lighting effects; this essentially just attempts to
// reproduce the fixed-function pipeline
//
// --------------------------------------------------------

NSFShader Solid
{
	// Attribute list
	Global_Attributes
	{
		// Directional light
		Attrib_Point3		SunDir			Artist  0.0,0.0,1.0
		Attrib_Color		SunColor		Artist  1.0,0.0,0.0
		Attrib_Color		SceneAmbient	Artist  1.0,0.0,0.0
	}


	// Packing Definition
	PackingDef Pos_Nor_Tex0
	{
		PD_FixedFunction	false
		PD_Stream			0
		PDP_Position		0	PDT_Float3
		PDP_Normal			3	PDT_Float3
		PDP_TexCoord0		7	PDT_Float2
	}

	// Implementation
    Implementation VS10
    {
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX8|DX9|XBOX
            VSVersion           = v1.0
            UserVersion         = v0.0
            PSVersion           = v0.0
            UsesNiRenderState   = true
        }

		// Packing Definition it uses
		PackingDef	Pos_Nor_Tex0
        
        // First pass
        Pass Pass0
        {            
			// Vertex shader program
            VSProgram   "Solid.vsh"

			// Vertex Shader constant map
			VS_Constantmap
			{
				// Directional light
				CM_Global		SunDir					0	1
				CM_Global		SunColor				1	1
				CM_Global		SceneAmbient			2	1
				
				// Material
				CM_Defined		MaterialDiffuse			3	0
				
				// misc constants
    			CM_Constant		MiscConstants			5	1	0.0,1.0,0.5,1020.01
				
				// Matrices
				CM_Defined		WorldViewProjTranspose	6	0
				CM_Defined		InvWorldTranspose		14	0
			}

            // Texture stage 0
            // (base map)
            Stage 0 Stage0
            {
            	// color = diffuse * base
				TSS_ColorArg1   = TA_Texture
				TSS_ColorArg2   = TA_Diffuse
                TSS_ColorOp     = TOP_Modulate4x
                
				// alpha = base
				TSS_AlphaArg1   = TA_Texture
				TSS_AlphaOp     = TOP_SelectArg1
                
				TSS_Texture     = NTM_Base
				TSS_TexCoordIndex = 0
				TSS_TextureTransformFlags	= TTFF_Disable
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_Linear
            }

            // Texture stage 1
			// (dark map)
			Stage 1 Stage1
			{
				// color = current * dark
				TSS_ColorArg1   = TA_Texture
				TSS_ColorArg2   = TA_Current
				TSS_ColorOp     = TOP_Modulate
				
                // alpha = current
				TSS_AlphaArg1   = TA_Current
                TSS_AlphaOp     = TOP_SelectArg1
				
				TSS_Texture     = NTM_Dark
				TSS_TexCoordIndex = 1
				TSS_TextureTransformFlags	= TTFF_Disable
			}

			// Sampler stage 1
			Sampler 1   Sampler1
			{
				TSAMP_AddressU  = TADDR_Wrap
				TSAMP_AddressV  = TADDR_Wrap
				TSAMP_AddressW  = TADDR_Wrap
				TSAMP_MagFilter = TEXF_Linear
				TSAMP_MinFilter = TEXF_Linear
				TSAMP_MipFilter = TEXF_Linear
            }
        }
    }
}
